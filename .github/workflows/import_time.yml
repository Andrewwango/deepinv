name: "⏰ Import Time Benchmark (vs main)"

on:
  pull_request:
      branches:
      - main

permissions:
  contents: read

jobs:
  benchmark-comparison:
    name: Import time vs main
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # Ubuntu tests
          - extra: dataset,denoisers,test,training
            name: "all optional dependencies"
          - extra: ""
            name: "no optional dependencies"

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.11
          cache: 'pip' # caching pip dependencies

      - name: "Set up Hyperfine"
        run: |
          sudo apt-get update && sudo apt-get install -y hyperfine

      - name: Install deepinv and its dependencies
        run: |
          # if the extra is empty, install without optional dependencies
          if [ "${{ matrix.extra }}" = "" ]; then
            pip install .
          else
            pip install .[${{ matrix.extra }}]
          fi

      - name: "Benchmark PR (HEAD)"
        run: |
          echo "Benchmarking PR branch..."
          hyperfine --warmup 3 --show-output --export-json head.json 'python -c "import deepinv"'

      - name: "Checkout main branch"
        run: |
          pip uninstall -y deepinv # Clean up for the next step
          git fetch origin main --depth=1
          git checkout main
          pip install natsort
          pip install .

      - name: "Benchmark main (BASE)"
        run: |
          echo "Benchmarking main branch..."
          hyperfine --warmup 3 --show-output --export-json base.json 'python -c "import deepinv"'

      - name: "Compare results and fail on regression"
        uses: actions/github-script@v7
        with:
          script: |
            const core = require('@actions/core');
            const fs = require('fs');

            const headResult = JSON.parse(fs.readFileSync('head.json', 'utf8')).results[0];
            const baseResult = JSON.parse(fs.readFileSync('base.json', 'utf8')).results[0];

            const headMean = headResult.mean;
            const baseMean = baseResult.mean;

            const ratio = headMean / baseMean;
            const threshold = 1.10; // 10% regression threshold

            core.info(`Base (main) mean time: ${(baseMean * 1000).toFixed(2)} ms`);
            core.info(`Head (PR) mean time:   ${(headMean * 1000).toFixed(2)} ms`);
            core.info(`Ratio (PR/main):       ${ratio.toFixed(2)}`);
            core.info(`Failure threshold:     >${threshold}`);

            if (ratio > threshold) {
              const percentage = ((ratio - 1) * 100).toFixed(2);
              core.setFailed(`❌ Performance regression detected! Import time increased by ${percentage}%, which is over the 10% threshold.`);
            } else {
              core.info('✅ No significant performance regression detected.');
            }